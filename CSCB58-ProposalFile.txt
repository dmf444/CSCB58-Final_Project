CSCB58 Project File: Winter 2018

Team Member A
-------------
First Name: David
Last Name: Fernandes
Student Number: {REDACTED}
UofT E-mail Address: david.fernandes@mail.utoronto.ca


Team Member B
-------------
First Name: Stefan
Last Name: Mitic
Student Number: {REDACTED}
UofT E-mail Address: stefan.mitic@mail.utoronto.ca

Team Member C
-------------
First Name: Hessamoddin
Last Name: Sharifpour
Student Number: {REDACTED}
UofT E-mail Address: hessamoddin.sharifpour@mail.utoronto.ca

Team Member D
-------------
First Name: Arik
Last Name: Bautista
Student Number: {REDACTED}
UofT E-mail Address: arik.bautista@mail.utoronto.ca

---------------
Project Details
---------------

Project Title: Guitar Hero 115

Project Description:
A single song version of guitar hero, built on the DE2-115 board.

Video URL: https://www.youtube.com/watch?v=A4jEJVYFJmg&feature=youtu.be

Code URL: https://github.com/dmf444/CSCB58-Final_Project


-----------
Proposal
-----------

What do you plan to have completed by the end of the first lab session?:
A single line of LEDs, loaded from some memory storage and shifted down to LEDR[0]. Once getting to LEDR[0], the player will have to click the button if LEDR[0] is on and not click it, should it be off.
The intent of this phase is to show a proof of concept, make sure that the Shifters can be loaded from a ram module.

What do you plan to have completed by the end of the second lab session?:
By the end of this lab, we should have some way to output audio on a single track AND something simple that can be displayed on the monitor.

What do you plan to have completed by the end of the third lab session?:
3 to 4 track of data, sycronized to the screen and allowing for the guitar hero game to be played.

What is your backup plan if things don't work out as planned?
Due to the way we're intending to work on our project, each week, we should have something better than the last. If something in a given week doesn't work out,
we can submit the work from week n-1.

What hardware will you need beyond the DE2 board : 
Speakers, with a standard 3.5mm input and a monitor.


-----------
Motivations
-----------
How does this project relate to the material covered in CSCB58?:
We've spent time learning about clocks, shifting, counters, hexidecimal displays and circuit logic. This project will incorporate much of what we've
learned in labs and lectures, all while allowing us the opportunity to design a complex circuit in verilog. 

Why is this project interesting/cool (for CSCB58 students, and for non CSCB58 students?):
Everyone, at some point, has played or been exposed to rhythm games. This project seeks to emulate something that anyone can pick up, play with and have fun.

Why did you personally choose this project?:
The keys on the DE2 board reminded us of the buttons in Guitar Hero. It also seemed like a reasonable goal to accomplish.

------------
Attributions
------------
module rate_divider_fast -> Appears in untestedsidemodules.v as RDF
Taken From: https://github.com/brian-chim/b58_snake/blob/master/FinalFinal/helpers2.v


------------
Updates
------------

We've written our first project proposal.
Week 1:
- Created a prototype for the animation of a peg moving down the screen on the VGA display using a counter to keep track of the location and movement of the object.
- Completed one track that is automatically shifted and tested through the LEDs on a counter.
- Wrote a complete game track that needs to be checked and tested.
- Started working on the audio output for the game by downloading Altera's Music Sythesizer Demonstration and removing unneccessary features from their verilog files.

Week 2:
-Prototype of one track completed using the DE2 board's LED's with Hex display as a scoreboard.
-Able to output audio and learned how to modify the notes being outputted. It now outputs the first few seconds of the Mario Theme.
-VGA display can now display 4 separate pegs moving down the screen. Now working on hardcoding each peg when/where to appear.
-Need to start putting together the VGA diplay, the audio, and the responsive part of the game together.

Week 3:
-Created a full board running game.
-Created the responsive portion by using counters from the VGA display and checking if a player pressed the correct key in order to earn points.
-Added a counter for the points the player earns.
-Created two audio tracks that play from the speaker during gameplay. Need to update mif files to sync the notes with the audio tracks.
-Merged the two portions of the code together, the VGA display and the game logic.

Presentation:
-Created 2 song tacks: Amazing Grace and Jesus Christ has Risen from The Dead. The reason for the 2 song choices was because we were limited to a major scale and only 1 octave. Which means we only had 8 available notes that we can use. We decided to choose Amazing Grace for our presentation and we semi-synced the notes on screen with the audio.
-We also implemented a high score system that displays on HEX2 and HEX3 while HEX0 and HEX1 displayed the current score.
-The game functions as inteded. When the player presses a key when the peg is in the "sweet spot" then the player gains a point. When they press a key when the peg is outside of the "sweet spot" then their score resets back to 0. Finally, if the player allows the peg to pass by then they neither gain nor lose points.
-Fixed the visual bug where 1 pixel on the bottom right of each peg was missing.
